# -*- coding: utf-8 -*-
"""CNN_From_Scratch_P1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rqfn21uT36buqmmR_MmpBq_9c1OtA6es
"""

import numpy as np 
from PIL import Image
import matplotlib.pyplot as plt 
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.datasets import make_moons 
import imageio

def PadImage(image, padding=1, default_pad_value=0) -> np.array:
  if len(image.shape) == 4: 
    num_images,  rows, cols,channels = image.shape 
    padded_map = np.full((num_images, rows + 2 * padding, cols + 2 * padding, channels), default_pad_value, dtype="float64")
    padded_map[ : ,padding : padding + rows, padding : padding + cols, : ] = image 
    return padded_map 

  elif len(image.shape) == 3: 
    rows, cols, channels = image.shape 
    padded_map = np.full((rows + 2 * padding, cols + 2 * padding, channels), default_pad_value, dtype="float64")
    padded_map[padding : padding + rows, padding : padding + cols, : ] = image 
    return padded_map 

  elif len(images.shape) == 2:
    rows, cols = image.shape
    padded_map = np.full((rows + 2 * padding, cols + 2 * padding), default_pad_value, dtype="float64")
    padded_map[ padding : padding + rows, padding : padding + cols] = image 
    return padded_map

def Convolve(image:np.array, kernel: np.array, stride:int = 1):
  rows, cols, channels = image.shape
  Krows, Kcols, Kdepth = kernel.shape
  Krows, Kcols, Kdepth = kernel.shape
  # scaleFactor = np.sum(kernel)
  # scaleFactor = Krows * Kcols
  scaleFactor = 1
  TargetShape = (((rows - Krows) // stride) + 1, ((cols - Kcols) // stride + 1), channels)
  target = np.zeros(TargetShape)

  RowStart = Krows // 2  
  ColStart = Kcols // 2  
  tr = 0
  for i in range(RowStart, rows - RowStart, stride):
    tc = 0
    for j in range(ColStart, cols - ColStart, stride):
      ImageTarget = image[i - RowStart: i + RowStart + 1, j - ColStart: j + ColStart + 1]
      PixelSum = np.sum(ImageTarget * kernel, axis = (0,1)) 
      target[tr][tc] = PixelSum
      tc +=1 
    tr +=1 
  return target / scaleFactor 



def ConvolveGreyscale(image:np.array, kernel: np.array, stride:int = 1):
  pass 
  

image = imageio.imread("/content/49823956271_a8dc9588f9_b.jpeg")
imageArr = np.array(image)
kernel = np.array([
                   [-1,-1,-1],
                   [-1,8,-1],
                   [-1,-1,-1]
                  ])


padded = Convolve(imageArr, np.expand_dims(kernel, axis = 2), stride = 1)

plt.imshow(padded / 255)